import logging
import os
import openai
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

openai.api_key = OPENAI_API_KEY

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# --- –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Steam ID ---
steam_ids = {}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
kb = ReplyKeyboardMarkup(resize_keyboard=True)
kb.add(KeyboardButton("üìñ –ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?"))
kb.add(KeyboardButton("üß† –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞"))

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message_handler(commands=["start"])
async def start_handler(msg: types.Message):
    logger.info(f"/start –æ—Ç {msg.from_user.id}")
    await msg.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–µ–π Dota 2.\n\n"
        "–°–¥–µ–ª–∞–π –ø—Ä–æ—Ñ–∏–ª—å –ø—É–±–ª–∏—á–Ω—ã–º –∏ –≤–≤–µ–¥–∏ /setsteam <—Ç–≤–æ–π Steam32 ID>.",
        reply_markup=kb
    )

@dp.message_handler(commands=["setsteam"])
async def set_steam_id(msg: types.Message):
    parts = msg.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        await msg.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /setsteam 123456789")
        return
    steam_id = parts[1]
    steam_ids[msg.from_user.id] = steam_id
    logger.info(f"Steam ID {steam_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è {msg.from_user.id}")
    await msg.reply(f"‚úÖ Steam ID —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {steam_id}\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /analyze")

@dp.message_handler(commands=["analyze"])
async def analyze_match(msg: types.Message):
    user_id = msg.from_user.id
    steam_id = steam_ids.get(user_id)
    if not steam_id:
        await msg.reply("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ–π Steam ID —á–µ—Ä–µ–∑ /setsteam")
        return

    await msg.reply("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –º–∞—Ç—á...")

    try:
        async with aiohttp.ClientSession() as session:
            url = f"https://api.opendota.com/api/players/{steam_id}/recentMatches"
            async with session.get(url) as r:
                matches = await r.json()

            if not matches:
                await msg.reply("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–∫—Ä—ã—Ç –∏ –∏—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π –¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç.")
                return

            match_id = matches[0]['match_id']
            url = f"https://api.opendota.com/api/matches/{match_id}"
            async with session.get(url) as r:
                match_data = await r.json()

        player_data = next((p for p in match_data.get("players", []) if str(p.get("account_id")) == steam_id), None)
        if not player_data:
            await msg.reply("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫ –≤ –º–∞—Ç—á–µ.")
            return

        summary = (
            f"–ì–µ—Ä–æ–π: {player_data.get('hero_id')}\n"
            f"K/D/A: {player_data['kills']}/{player_data['deaths']}/{player_data['assists']}\n"
            f"–£—Ä–æ–Ω: {player_data['hero_damage']}, –ó–æ–ª–æ—Ç–æ: {player_data['total_gold']}"
        )

        prompt = (
            "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Dota 2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–≥—Ä—É –∏–≥—Ä–æ–∫–∞, –≤—ã–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π —Ä–∞–∑–±–æ—Ä, —Å–æ–≤–µ—Ç—ã –∏ –æ—à–∏–±–∫–∏.\n\n"
            f"–î–∞–Ω–Ω—ã–µ:\n{summary}"
        )

        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ Dota 2."},
                {"role": "user", "content": prompt}
            ]
        )

        analysis = response.choices[0].message.content.strip()
        await msg.reply(f"üß™ –ê–Ω–∞–ª–∏–∑:\n{analysis}")

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")
        await msg.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–∞.")

@dp.message_handler(lambda msg: msg.text == "üß† –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞")
async def analyze_button(msg: types.Message):
    await analyze_match(msg)

@dp.message_handler(lambda msg: msg.text == "üìñ –ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?")
async def profile_help(msg: types.Message):
    await msg.reply(
        "1. Steam ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–≥—Ä–∞ Dota 2 ‚Üí –ü—É–±–ª–∏—á–Ω–æ\n"
        "2. –í Dota 2: –°–æ–æ–±—â–µ—Å—Ç–≤–æ ‚Üí –û–±—â–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π\n"
        "3. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É: /setsteam <Steam32 ID>"
    )

# --- –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Polling ---
if __name__ == "__main__":
    logger.info("Starting bot in polling mode...")
    executor.start_polling(dp, skip_updates=True)
