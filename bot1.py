import logging
import os
import openai
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.executor import start_webhook

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 3000))

openai.api_key = OPENAI_API_KEY

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# --- –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Steam ID ---
steam_ids = {}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
kb = ReplyKeyboardMarkup(resize_keyboard=True)
kb.add(KeyboardButton("üìñ –ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?"))
kb.add(KeyboardButton("üß† –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞"))

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message_handler(commands=["start"])
async def start_handler(msg: types.Message):
    instructions = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–µ–π Dota 2.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, —Å–¥–µ–ª–∞–π —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø—É–±–ª–∏—á–Ω—ã–º:\n"
        "Steam ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–≥—Ä–∞ Dota 2 ‚Üí –ü—É–±–ª–∏—á–Ω–æ\n\n"
        "–ü–æ—Ç–æ–º –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É: /setsteam <—Ç–≤–æ–π Steam32 ID>"
    )
    await msg.reply(instructions, reply_markup=kb)

@dp.message_handler(commands=["setsteam"])
async def set_steam_id(msg: types.Message):
    parts = msg.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        await msg.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /setsteam 123456789")
        return
    steam_id = parts[1]
    steam_ids[msg.from_user.id] = steam_id
    await msg.reply(f"‚úÖ Steam ID —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {steam_id}\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /analyze")

@dp.message_handler(commands=["analyze"])
async def analyze_match(msg: types.Message):
    user_id = msg.from_user.id
    steam_id = steam_ids.get(user_id)
    if not steam_id:
        await msg.reply("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ–π Steam ID —á–µ—Ä–µ–∑ /setsteam")
        return

    await msg.reply("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞...")

    try:
        async with aiohttp.ClientSession() as session:
            recent_url = f"https://api.opendota.com/api/players/{steam_id}/recentMatches"
            async with session.get(recent_url) as r:
                recent_matches = await r.json()
            if not recent_matches:
                await msg.reply("‚ö†Ô∏è –ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            last_match_id = recent_matches[0]['match_id']

            match_url = f"https://api.opendota.com/api/matches/{last_match_id}"
            async with session.get(match_url) as r:
                match_data = await r.json()

        player_data = next((p for p in match_data.get("players", []) if str(p.get("account_id")) == steam_id), None)
        if not player_data:
            await msg.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞ –≤ –º–∞—Ç—á–µ.")
            return

        summary = (
            f"–ì–µ—Ä–æ–π: {player_data.get('hero_id')}\n"
            f"K/D/A: {player_data['kills']}/{player_data['deaths']}/{player_data['assists']}\n"
            f"Net Worth: {player_data['total_gold']} –∑–æ–ª–æ—Ç–∞\n"
            f"–£—Ä–æ–Ω –ø–æ –≥–µ—Ä–æ—è–º: {player_data['hero_damage']}\n"
            f"–õ–∏–Ω–∏—è: {player_data.get('lane', 'N/A')}\n"
            f"–ü–æ–±–µ–¥–∞: {'–î–∞' if player_data.get('win') else '–ù–µ—Ç'}"
        )

        prompt = (
            "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫ Dota 2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–≥—Ä—É —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –≤—ã–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π, –Ω–æ –≥–ª—É–±–æ–∫–∏–π —Ä–∞–∑–±–æ—Ä, –æ—à–∏–±–∫–∏ –∏ —Å–æ–≤–µ—Ç—ã."
            f"\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–∞:\n{summary}"
        )

        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Dota 2 –∏ –∞–Ω–∞–ª–∏–∑—É –º–∞—Ç—á–µ–π."},
                {"role": "user", "content": prompt}
            ]
        )

        analysis = response.choices[0].message.content.strip()
        await msg.reply(f"üß™ –ê–Ω–∞–ª–∏–∑:\n{analysis}")

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–∞—Ç—á–∞")
        await msg.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–∞—Ç—á–∞.")

@dp.message_handler(lambda msg: msg.text == "üß† –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞")
async def analyze_button(msg: types.Message):
    await analyze_match(msg)

@dp.message_handler(lambda msg: msg.text == "üìñ –ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?")
async def profile_help(msg: types.Message):
    instructions = (
        "üîì –ß—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –º–∞—Ç—á–∏, —Å–¥–µ–ª–∞–π –ø—Ä–æ—Ñ–∏–ª—å Dota 2 –ø—É–±–ª–∏—á–Ω—ã–º:\n\n"
        "1. –ó–∞–π–¥–∏ –≤ Dota 2\n"
        "2. –ü–µ—Ä–µ–π–¥–∏ –≤ ‚öôÔ∏è —Ä–∞–∑–¥–µ–ª –°–æ–æ–±—â–µ—Å—Ç–≤–æ\n"
        "3. –í–∫–ª—é—á–∏ –≥–∞–ª–æ—á–∫—É: ¬´–û–±—â–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π¬ª\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏: /setsteam <—Ç–≤–æ–π Steam32 ID>"
    )
    await msg.reply(instructions)

# --- Webhook lifecycle ---
async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
    logging.info(f"Webhook set to: {WEBHOOK_URL}")

async def on_shutdown(dp):
    logging.info("Shutting down webhook...")
    await bot.delete_webhook()

# --- –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Webhook ---
if __name__ == "__main__":
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
