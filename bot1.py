import logging
import os
import openai
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.executor import start_webhook

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://dota-sheriff.onrender.com
WEBHOOK_PATH = f"/webhook/{TELEGRAM_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 3000))  # Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–¥–∞—ë—Ç PORT

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
kb = ReplyKeyboardMarkup(resize_keyboard=True)
kb.add(KeyboardButton("üìñ –ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?"))
kb.add(KeyboardButton("üß† –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞"))

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message_handler(commands=["start"])
async def start_handler(msg: types.Message):
    instructions = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–µ–π Dota 2.\n\n"
        "üîì –ß—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –º–∞—Ç—á–∏, —Å–¥–µ–ª–∞–π –ø—Ä–æ—Ñ–∏–ª—å Dota 2 –ø—É–±–ª–∏—á–Ω—ã–º:\n"
        "Steam ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è ‚Üí –ü—É–Ω–∫—Ç '–ò–≥—Ä–∞ Dota 2' ‚Üí –ü—É–±–ª–∏—á–Ω–æ\n\n"
        "1. –ó–∞–π–¥–∏ –≤ Dota 2\n"
        "2. –ü–µ—Ä–µ–π–¥–∏ –≤ ‚öôÔ∏è –†–∞–∑–¥–µ–ª –°–æ–æ–±—â–µ—Å—Ç–≤–æ\n"
        "4. –í–∫–ª—é—á–∏ –≥–∞–ª–æ—á–∫—É: ¬´–û–±—â–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π¬ª\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏: /setsteam [—Ç–≤–æ–π Steam32 ID]"
    )
    await msg.reply(instructions, reply_markup=kb)

@dp.message_handler(commands=["setsteam"])
async def set_steam_id(msg: types.Message):
    parts = msg.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        await msg.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /setsteam 123456789")
        return
    steam_id = parts[1]
    await msg.reply(f"‚úÖ Steam ID —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {steam_id}\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /analyze")

@dp.message_handler(commands=["analyze"])
async def analyze_match(msg: types.Message):
    await msg.reply("üîÑ –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

@dp.message_handler(lambda msg: msg.text == "üß† –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞")
async def analyze_button(msg: types.Message):
    await analyze_match(msg)

@dp.message_handler(lambda msg: msg.text == "üìñ –ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?")
async def profile_help(msg: types.Message):
    instructions = (
        "üîì –ß—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –º–∞—Ç—á–∏, —Å–¥–µ–ª–∞–π –ø—Ä–æ—Ñ–∏–ª—å Dota 2 –ø—É–±–ª–∏—á–Ω—ã–º:\n\n"
        "1. –ó–∞–π–¥–∏ –≤ Dota 2\n"
        "2. –ü–µ—Ä–µ–π–¥–∏ –≤ ‚öôÔ∏è —Ä–∞–∑–¥–µ–ª –°–æ–æ–±—â–µ—Å—Ç–≤–æ\n"
        "3. –í–∫–ª—é—á–∏ –≥–∞–ª–æ—á–∫—É: ¬´–û–±—â–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π¬ª\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏: /setsteam [—Ç–≤–æ–π Steam32 ID]"
    )
    await msg.reply(instructions)

# --- Webhook lifecycle ---
async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
    logging.info(f"Webhook set to: {WEBHOOK_URL}")

async def on_shutdown(dp):
    logging.info("Shutting down webhook...")
    await bot.delete_webhook()

# --- –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Webhook ---
if __name__ == "__main__":
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
