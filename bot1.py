import logging
import os
import openai
import aiohttp
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.utils.exceptions import TelegramAPIError
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ)
load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ Steam ID ---
user_steam_ids = {}

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
kb = ReplyKeyboardMarkup(resize_keyboard=True)
kb.add(KeyboardButton("üìñ –ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?"))
kb.add(KeyboardButton("üß† –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞"))

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message_handler(commands=["start"])
async def start_handler(msg: types.Message):
    logger.info(f"/start –æ—Ç {msg.from_user.id}")
    instructions = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–µ–π Dota 2.\n\n"
        "üîì –ß—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –º–∞—Ç—á–∏, —Å–¥–µ–ª–∞–π –ø—Ä–æ—Ñ–∏–ª—å Dota 2 –ø—É–±–ª–∏—á–Ω—ã–º:\n"
        "Steam ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è ‚Üí –ü—É–Ω–∫—Ç '–ò–≥—Ä–∞ Dota 2' ‚Üí –ü—É–±–ª–∏—á–Ω–æ\n\n"
        "1. –ó–∞–π–¥–∏ –≤ Dota 2\n"
        "2. –ü–µ—Ä–µ–π–¥–∏ –≤ ‚öôÔ∏è –†–∞–∑–¥–µ–ª –°–æ–æ–±—â–µ—Å—Ç–≤–æ\n"
        "3. –í–∫–ª—é—á–∏ –≥–∞–ª–æ—á–∫—É: ¬´–û–±—â–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π¬ª\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏: /setsteam [—Ç–≤–æ–π Steam32 ID]"
    )
    await msg.reply(instructions, reply_markup=kb)

@dp.message_handler(commands=["setsteam"])
async def set_steam_id(msg: types.Message):
    parts = msg.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        await msg.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /setsteam 123456789")
        return
    steam_id = parts[1]
    user_steam_ids[msg.from_user.id] = steam_id
    logger.info(f"Steam ID {steam_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è {msg.from_user.id}")
    await msg.reply(f"‚úÖ Steam ID —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {steam_id}\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /analyze")

@dp.message_handler(commands=["analyze"])
async def analyze_match(msg: types.Message):
    user_id = msg.from_user.id
    steam_id = user_steam_ids.get(user_id)
    if not steam_id:
        await msg.reply("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ Steam ID —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /setsteam")
        return

    await msg.reply("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞...")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"https://api.opendota.com/api/players/{steam_id}/matches?limit=1") as resp:
                if resp.status != 200:
                    raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenDota")
                data = await resp.json()
                if not data:
                    await msg.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–∫—Ä—ã—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç.")
                    return
                match = data[0]
                hero_id = match.get("hero_id")
                kills = match.get("kills")
                deaths = match.get("deaths")
                assists = match.get("assists")
                result = "–ø–æ–±–µ–¥–∞" if match.get("radiant_win") == (match.get("player_slot") < 128) else "–ø–æ—Ä–∞–∂–µ–Ω–∏–µ"
                summary = f"–¢–≤–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á: {result}. {kills}/{deaths}/{assists}. –ì–µ—Ä–æ–π: {hero_id}."

                # –û—Ç–ø—Ä–∞–≤–∏–º –≤ OpenAI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                prompt = (
                    f"–ò–≥—Ä–æ–∫ —Å—ã–≥—Ä–∞–ª –º–∞—Ç—á –Ω–∞ –≥–µ—Ä–æ–µ {hero_id}. –£ –Ω–µ–≥–æ {kills} —É–±–∏–π—Å—Ç–≤, {deaths} —Å–º–µ—Ä—Ç–µ–π, {assists} –∞—Å—Å–∏—Å—Ç–æ–≤. "
                    f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫—Ä–∞—Ç–∫–∏–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –µ–≥–æ –∏–≥—Ä—ã."
                )
                response = await openai.ChatCompletion.acreate(
                    model="gpt-4",
                    messages=[{"role": "user", "content": prompt}]
                )
                answer = response.choices[0].message.content
                await msg.reply(summary + "\n\n" + answer)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–∞—Ç—á–∞")
        await msg.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–∞—Ç—á–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

@dp.message_handler(lambda msg: msg.text == "üß† –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞")
async def analyze_button(msg: types.Message):
    await analyze_match(msg)

@dp.message_handler(lambda msg: msg.text == "üìñ –ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?")
async def profile_help(msg: types.Message):
    instructions = (
        "üîì –ß—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –º–∞—Ç—á–∏, —Å–¥–µ–ª–∞–π –ø—Ä–æ—Ñ–∏–ª—å Dota 2 –ø—É–±–ª–∏—á–Ω—ã–º:\n\n"
        "1. –ó–∞–π–¥–∏ –≤ Dota 2\n"
        "2. –ü–µ—Ä–µ–π–¥–∏ –≤ ‚öôÔ∏è —Ä–∞–∑–¥–µ–ª –°–æ–æ–±—â–µ—Å—Ç–≤–æ\n"
        "3. –í–∫–ª—é—á–∏ –≥–∞–ª–æ—á–∫—É: ¬´–û–±—â–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π¬ª\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏: /setsteam [—Ç–≤–æ–π Steam32 ID]"
    )
    await msg.reply(instructions)

# --- Startup ---
async def on_startup_polling(dp):
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("Webhook —É–¥–∞–ª—ë–Ω –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º polling")
    except TelegramAPIError as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook: {e}")

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup_polling, skip_updates=True)
