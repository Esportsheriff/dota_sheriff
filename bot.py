import requests
import openai
import logging
import json
import os
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TELEGRAM_TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'
OPENDOTA_API = 'https://api.opendota.com/api'
OPENAI_API_KEY = 'YOUR_OPENAI_API_KEY'
openai.api_key = OPENAI_API_KEY
USER_DB_PATH = 'user_steam_ids.json'

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# --- –ò–º–∏—Ç–∞—Ü–∏—è –ë–î ---
def load_user_ids():
    if os.path.exists(USER_DB_PATH):
        with open(USER_DB_PATH, 'r') as f:
            return json.load(f)
    return {}

def save_user_ids(data):
    with open(USER_DB_PATH, 'w') as f:
        json.dump(data, f)

user_steam_ids = load_user_ids()
unlocked_users = set(user_steam_ids.keys())

# --- UI –ö–æ–º–∞–Ω–¥—ã ---
@dp.message_handler(commands=['start'])
async def welcome(msg: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üë§ –ü—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π Steam ID"))
    if str(msg.from_user.id) in user_steam_ids:
        keyboard.add(KeyboardButton("üéÆ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∞—Ç—á–µ–π"))
    keyboard.add(KeyboardButton("üìä –†–∞–∑–±–æ—Ä –ø–æ ID –º–∞—Ç—á–∞ –∏ –≥–µ—Ä–æ—é"))
    keyboard.add(KeyboardButton("üìñ –ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?"))
    await msg.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.text == "üë§ –ü—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π Steam ID")
async def prompt_bind(msg: types.Message):
    await msg.reply("–í–≤–µ–¥–∏ Steam32 ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: /setsteam 90665163)")

@dp.message_handler(lambda msg: msg.text == "üìñ –ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?")
async def profile_help(msg: types.Message):
    instructions = (
        "üîì –ß—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –º–∞—Ç—á–∏, —Å–¥–µ–ª–∞–π –ø—Ä–æ—Ñ–∏–ª—å Dota 2 –ø—É–±–ª–∏—á–Ω—ã–º:

"
        "1. –ó–∞–π–¥–∏ –≤ Dota 2
"
        "2. –ù–∞–∂–º–∏ –Ω–∞ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å (–≤–≤–µ—Ä—Ö—É)
"
        "3. –ü–µ—Ä–µ–π–¥–∏ –≤ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
"
        "4. –í–∫–ª—é—á–∏ –≥–∞–ª–æ—á–∫—É: ¬´–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø—É–±–ª–∏—á–Ω—ã–º¬ª

"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏: /setsteam [—Ç–≤–æ–π Steam32 ID]"
    )
    await msg.reply(instructions)

@dp.message_handler(commands=['setsteam'])
async def set_steam(msg: types.Message):
    try:
        steam_id = int(msg.text.split()[1])
        check = requests.get(f"{OPENDOTA_API}/players/{steam_id}")
        if check.status_code == 200 and 'profile' in check.json():
            user_steam_ids[str(msg.from_user.id)] = steam_id
            save_user_ids(user_steam_ids)
            await msg.reply(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ—Ç–∫—Ä—ã—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! Steam ID: {steam_id}")
        else:
            await msg.reply("üîí –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç. –û—Ç–∫—Ä–æ–π –µ–≥–æ –≤ Dota 2 (–Ω–∞–∂–º–∏ 'üìñ –ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?') –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.")
    except:
        await msg.reply("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /setsteam 123456789")

@dp.message_handler(lambda msg: msg.text == "üéÆ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∞—Ç—á–µ–π")
async def last10_matches(msg: types.Message):
    user_id = str(msg.from_user.id)
    if user_id not in user_steam_ids:
        await msg.reply("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Å–≤–æ–π Steam ID –∫–æ–º–∞–Ω–¥–æ–π /setsteam")
        return

    steam_id = user_steam_ids[user_id]
    url = f"{OPENDOTA_API}/players/{steam_id}/matches?limit=10"
    resp = requests.get(url)
    if resp.status_code != 200:
        await msg.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç—á–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    matches = resp.json()
    if not matches:
        await msg.reply("–ù–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    for m in matches:
        match_id = m.get("match_id")
        kills = m.get("kills", 0)
        deaths = m.get("deaths", 0)
        assists = m.get("assists", 0)
        kda = f"{kills}/{deaths}/{assists}"
        win = "‚úÖ Win" if (m["radiant_win"] and m["player_slot"] < 128) or (not m["radiant_win"] and m["player_slot"] >= 128) else "‚ùå Loss"
        caption = f"{win} | Match ID: {match_id} | KDA: {kda}"

        kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton(f"üìä –†–∞–∑–æ–±—Ä–∞—Ç—å {match_id}", callback_data=f"analyze_{match_id}")
        )
        await msg.reply(caption, reply_markup=kb)

@dp.callback_query_handler(lambda call: call.data.startswith("analyze_"))
async def inline_analyze(call: types.CallbackQuery):
    match_id = call.data.split("_")[1]
    user_id = str(call.from_user.id)
    steam_id = user_steam_ids.get(user_id)

    await call.message.answer(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–∞—Ç—á {match_id}...")

    data = get_match_data(match_id)
    if not data or not steam_id:
        await call.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
        return

    player = find_player(data, user_id=user_id)
    if not player:
        await call.message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫ –ø–æ Steam ID.")
        return

    try:
        summary = generate_ai_player_summary(player, match_id)
    except Exception as e:
        logging.warning(f"GPT fallback: {e}")
        summary = f"–ò–≥—Ä–∞–ª {player.get('personaname', '–∞–Ω–æ–Ω–∏–º')}, —É–º–µ—Ä {player['deaths']} —Ä–∞–∑, GPM {player['gold_per_min']} ‚Äî –Ω—É —Ç—ã –ø–æ–Ω—è–ª‚Ä¶"

    await call.message.answer(summary)

@dp.message_handler(lambda msg: ':' in msg.text)
async def analyze_with_gpt(msg: types.Message):
    parts = msg.text.split(':')
    match_id = parts[0]
    hero_name = parts[1]

    await msg.reply("üîç –ò—â—É –º–∞—Ç—á –∏ –≥–æ—Ç–æ–≤–ª—é —Ä–∞–∑–±–æ—Ä...")

    data = get_match_data(match_id)
    if not data:
        await msg.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å Match ID.")
        return

    player = find_player(data, msg.from_user.id, hero_name)
    if not player:
        await msg.reply("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫. –ü—Ä–æ–≤–µ—Ä—å –≥–µ—Ä–æ—è –∏–ª–∏ ID.")
        return

    try:
        summary = generate_ai_player_summary(player, match_id)
    except Exception as e:
        logging.warning(f"GPT fallback: {e}")
        summary = f"–ò–≥—Ä–∞–ª {player.get('personaname', '–∞–Ω–æ–Ω–∏–º')}, —É–º–µ—Ä {player['deaths']} —Ä–∞–∑, GPM {player['gold_per_min']} ‚Äî –Ω—É —Ç—ã –ø–æ–Ω—è–ª‚Ä¶"

    await msg.reply(summary)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_match_data(match_id):
    url = f"{OPENDOTA_API}/matches/{match_id}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    return None

def find_player(data, user_id=None, hero_name=None):
    if hero_name:
        for p in data['players']:
            if p.get('hero_name', '').lower() == hero_name.lower():
                return p
    if user_id and str(user_id) in user_steam_ids:
        steam32 = user_steam_ids[str(user_id)]
        for p in data['players']:
            if p.get('account_id') == steam32:
                return p
    return None

def build_gpt_prompt(player, match_id):
    prompt = f'''
–¢—ã ‚Äî —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π, –Ω–æ —É–º–Ω—ã–π Dota 2 —Ç—Ä–µ–Ω–µ—Ä. –Ø –ø–µ—Ä–µ–¥–∞—é —Ç–µ–±–µ JSON-–¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –º–∞—Ç—á–µ. 
–î–∞–π –æ–±—â–∏–π –≤–µ—Ä–¥–∏–∫—Ç, —É–∫–∞–∂–∏ –∫–ª—é—á–µ–≤—ã–µ –æ—à–∏–±–∫–∏ (–ø–æ —Ç–∞–π–º–∏–Ω–≥–∞–º), –∏ —Ö–æ—Ä–æ—à–∏–µ –º–æ–º–µ–Ω—Ç—ã. –¢–æ–Ω —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏ –º–µ—Ç–∫–∏–π.
–í–æ—Ç JSON –∏–≥—Ä–æ–∫–∞ –∏–∑ –º–∞—Ç—á–∞ ID {match_id}: {json.dumps(player, ensure_ascii=False)}
'''
    return prompt.strip()

def generate_ai_player_summary(player, match_id):
    prompt = build_gpt_prompt(player, match_id)
    response = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "–¢—ã ‚Äî —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ Dota 2."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.9,
        max_tokens=900,
        timeout=20
    )
    return response['choices'][0]['message']['content']

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)